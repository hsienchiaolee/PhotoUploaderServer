// This file was generated by counterfeiter
package servicefakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/hsienchiaolee/PhotoUploaderServer/service"
)

type FakeS3Service struct {
	PutObjectStub        func(input *s3.PutObjectInput) (*s3.PutObjectOutput, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		input *s3.PutObjectInput
	}
	putObjectReturns struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	invocations map[string][][]interface{}
}

func (fake *FakeS3Service) PutObject(input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	fake.putObjectMutex.Lock()
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		input *s3.PutObjectInput
	}{input})
	fake.guard("PutObject")
	fake.invocations["PutObject"] = append(fake.invocations["PutObject"], []interface{}{input})
	fake.putObjectMutex.Unlock()
	if fake.PutObjectStub != nil {
		return fake.PutObjectStub(input)
	} else {
		return fake.putObjectReturns.result1, fake.putObjectReturns.result2
	}
}

func (fake *FakeS3Service) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeS3Service) PutObjectArgsForCall(i int) *s3.PutObjectInput {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return fake.putObjectArgsForCall[i].input
}

func (fake *FakeS3Service) PutObjectReturns(result1 *s3.PutObjectOutput, result2 error) {
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Service) Invocations() map[string][][]interface{} {
	return fake.invocations
}

func (fake *FakeS3Service) guard(key string) {
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
}

var _ service.S3Service = new(FakeS3Service)
